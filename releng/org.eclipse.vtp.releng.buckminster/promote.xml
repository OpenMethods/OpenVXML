<project name="org.eclipse.dash.commonbuilder.releng/promote.xml"
         xmlns:au="antlib:org.apache.ant.antunit"
         xmlns="antlib:org.apache.tools.ant"
         default="main"
>
	<!--
		TODO: Do not run this script directly. Instead, copy promote-wrapper.xml into 
			  your .releng project and rename it to promote.xml, then run that script.
	-->

	<!-- default expected promote.properties file; you may want something else 
		 (or need multiple properties files for different build types / purposes)
	-->
	<property name="promote.properties" value="promote.properties" />
	<property file="${promote.properties}" />

	<target name="init">
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement path="${classpath}" />
				<pathelement location="${relengCommonBuilderDir}/lib/ant-contrib.jar" />
				<pathelement location="${relengBuilderDir}/lib/ant-contrib.jar" />
				<pathelement location="${thirdPartyJarsDir}/ant-contrib.jar" />
				<pathelement location="/usr/share/java/ant-contrib.jar" />
			</classpath>
		</taskdef>

		<var name="debug" value="true" />

		<!-- 
		# given a source dir
		#sourceZipsDir=/tmp/build 
		#sourceZipsDir=/opt/users/hudsonbuild/.hudson/jobs/cbi-ve-1.4.x-Ganymede/
		# promote script will search for subdirs such as:
				/opt/users/hudsonbuild/.hudson/jobs/cbi-ve-1.4.x-Ganymede/N201001031122
				/opt/users/hudsonbuild/.hudson/jobs/cbi-ve-1.4.x-Ganymede/2010-01-03_11-22-33/archive/build/N201001031122 (if more than one match found, newest dir by name selected)
				/opt/users/hudsonbuild/.hudson/jobs/cbi-ve-1.4.x-Ganymede/workspace/build/N201001031122
		# for every buildType specified below
		-->
		<property name="sourceZipsDir" value="${java.io.tmpdir}/build" />

		<!--
		# target dir
		#targetZipsDir=/home/data/httpd/download.eclipse.org/tools/ve/downloads/drops/1.4.0
		-->
		<property name="targetZipsDir" value="${java.io.tmpdir}/published/downloads" />

		<!--
		# type(s) to copy (N, I, M, S, R; default to all)
		#buildTypes=N,I,R
		-->
		<property name="buildTypes" value="N,I,M,S,R" />

		<!--
		# group owner of new files
		#targetGroup=veadmin
		-->
		<property name="targetGroup" value="common" />

		<!--
		# synch method method (add or replace; add = keep adding new builds to existing folder; replace = keep only newest copied build)
		#synchMethod=replace
		-->
		<property name="synchMethod" value="replace" />

		<!--
		# if set, update zip will be unpacked into destination dir and use synchMethod above to add or replace contents 
		#targetUpdateDir=/home/data/httpd/download.eclipse.org/tools/ve/updates/1.4
		-->
		<property name="targetUpdateDir" value="${java.io.tmpdir}/published/updates" />

	</target>

	<target name="main" depends="init">

		<if>
			<equals arg1="${synchMethod}" arg2="replace" />
			<then>
				<property name="synchMethodParam" value=" --delete" />
				<property name="unzipMethodParam" value="true" />
			</then>
			<else>
				<property name="synchMethodParam" value="" />
				<property name="unzipMethodParam" value="false" />
			</else>
		</if>

		<if>
			<and>
				<isset property="targetUpdateDir" />
				<not>
					<equals arg1="${targetUpdateDir}" arg2="" />
				</not>
			</and>
			<then>
				<if>
					<!-- clean up old updates -->
					<and>
						<equals arg1="${synchMethod}" arg2="replace" />
						<available file="${targetUpdateDir}/" type="dir" />
					</and>
					<then>
						<delete dir="${targetUpdateDir}/" includeemptydirs="true" />
					</then>
				</if>
				<mkdir dir="${targetUpdateDir}/" />
			</then>
		</if>

		<for param="buildType" list="${buildTypes}">
			<sequential>
				<mkdir dir="${targetZipsDir}/" />
				<if>
					<!-- clean up old builds -->
					<equals arg1="${synchMethod}" arg2="replace" />
					<then>
						<echo>Delete @{buildType}* dirs from ${targetZipsDir}/</echo>
						<delete dir="${targetZipsDir}/" includes="@{buildType}*/**" includeemptydirs="true" />
					</then>
				</if>

				<var name="sourceZipsDirActual" unset="true" />
				<getSourceZipsDir inputDir="${sourceZipsDir}" buildType="@{buildType}" />
				<debug>Promote build in ${sourceZipsDirActual} ...</debug>
				<for param="aDir" list="${sourceZipsDirActual}" delimiter=", 
	">
					<sequential>
						<!-- rsync or copy build dir @{aDir} into ${targetZipsDir}/ -->
						<if>
							<available file="/usr/bin/rsync" type="file" />
							<then>
								<var name="rsyncCmd"
								     value="/usr/bin/rsync -a${synchMethodParam} --exclude=eclipse/ @{aDir} ${targetZipsDir}/"
								/>
								<echo message="${rsyncCmd}" />
								<exec executable="bash">
									<arg line=" -c &quot;${rsyncCmd}&quot;" />
								</exec>
								<var name="rsyncCmd" unset="true" />
							</then>
							<else>
								<propertyregex override="true"
								               property="aBuildDir"
								               defaultvalue="@{aDir}"
								               input="@{aDir}"
								               regexp=".+/([^/]+)"
								               replace="\1"
								/>
								<echo>Copy ${aBuildDir} into ${targetZipsDir}/</echo>
								<mkdir dir="${targetZipsDir}/${aBuildDir}" />
								<copy todir="${targetZipsDir}/${aBuildDir}"
								      includeemptydirs="true"
								      preservelastmodified="true"
								      failonerror="true"
								>
									<fileset dir="@{aDir}" excludes="eclipse/" />
								</copy>
							</else>
						</if>

						<!-- unpack update zip(s) -->
						<if>
							<and>
								<isset property="targetUpdateDir" />
								<not>
									<equals arg1="${targetUpdateDir}" arg2="" />
								</not>
							</and>
							<then>
								<for param="anUpdateZip">
									<path>
										<fileset dir="@{aDir}" includes="*p2site*.zip" />
									</path>
									<sequential>
										<unzip dest="${targetUpdateDir}/"
										       src="@{anUpdateZip}"
										       overwrite="${unzipMethodParam}"
										/>
										<for param="subdir">
											<path>
												<dirset dir="${targetUpdateDir}/" />
											</path>
											<sequential>
												<copy file="index.php" todir="@{subdir}" />
											</sequential>
										</for>
									</sequential>
								</for>
							</then>
						</if>
					</sequential>
				</for>
				
			</sequential>
		</for>

		<!-- add index pages to update site to avoid 404s -->
		<if>
			<and>
				<isset property="targetUpdateDir" />
				<not>
					<equals arg1="${targetUpdateDir}" arg2="" />
				</not>
			</and>
			<then>
				<for param="subdir">
					<path>
						<dirset dir="${targetUpdateDir}/" />
					</path>
					<sequential>
						<copy file="index.php" todir="@{subdir}" />
					</sequential>
				</for>
			</then>
		</if>

		<!-- fix permissions + ownership on zips -->
		<echo>Fix permissions and group ownership on zips</echo>
		<chmod perm="755" type="dir">
			<fileset dir="${targetZipsDir}" />
		</chmod>
		<chmod perm="644" type="file">
			<fileset dir="${targetZipsDir}" />
		</chmod>
		<if>
			<and>
				<isset property="targetGroup" />
				<not>
					<equals arg1="${targetGroup}" arg2="" />
				</not>
			</and>
			<then>
				<chgrp group="${targetGroup}" type="both">
					<fileset dir="${targetZipsDir}" />
				</chgrp>
			</then>
		</if>

		<!-- fix permissions + ownership on update site -->
		<echo>Fix permissions and group ownership on update site</echo>
		<if>
			<and>
				<isset property="targetUpdateDir" />
				<not>
					<equals arg1="${targetUpdateDir}" arg2="" />
				</not>
			</and>
			<then>
				<chmod perm="755" type="dir">
					<fileset dir="${targetUpdateDir}" />
				</chmod>
				<chmod perm="644" type="file">
					<fileset dir="${targetUpdateDir}" />
				</chmod>
				<if>
					<and>
						<isset property="targetGroup" />
						<not>
							<equals arg1="${targetGroup}" arg2="" />
						</not>
					</and>
					<then>
						<chgrp group="${targetGroup}" type="both">
							<fileset dir="${targetUpdateDir}" />
						</chgrp>
					</then>
				</if>
			</then>
		</if>

		<echo> 
Note: Update Site Metadata will only expose the features from the last unpacked zip above.</echo>

		<if>
			<isset property="coordinatedReleaseBuildFile" />
			<then>
				<antcall target="updateBuildFile" />
			</then>
		</if>
	</target>


	<!-- get update site contents from ${targetUpdateDir} -->
	<target name="updateBuildFile"
	        description="update a Buckminster-compatible .build file for use with a coordinated release train such as Helios"
	>
		<if>
			<and>
				<isset property="targetUpdateDir" />
				<not>
					<equals arg1="${targetUpdateDir}" arg2="" />
				</not>
				<available file="${targetUpdateDir}/features" type="dir" />
				<isset property="coordinatedReleaseBuildFile" />
				<not>
					<equals arg1="${coordinatedReleaseBuildFile}" arg2="" />
				</not>
			</and>
			<then>
				<property name="coordinatedReleaseBranch" value="HEAD" />
				<property name="coordinatedReleaseName" value="helios" />
				<tempfile property="tmpfolder" destdir="${java.io.tmpdir}" prefix="promote.xml-updateBuildFile-" />
				<mkdir dir="${tmpfolder}" />

				<!-- 
					parse coordinatedReleaseBuildFile = :ext:nickb@dev.eclipse.org:/cvsroot/callisto:org.eclipse.helios.build/myproject.build
					into cvsRoot, cvsPath, and updated coordinatedReleaseBuildFile
					if CVS checkout fails, updateBuildFile task will fail
				-->
				<if>
					<and>
						<contains string="${coordinatedReleaseBuildFile}" substring=":" />
						<contains string="${coordinatedReleaseBuildFile}" substring="@" />
					</and>
					<then>
						<propertyregex override="true"
						               property="cvsRoot"
						               defaultvalue="${coordinatedReleaseBuildFile}"
						               input="${coordinatedReleaseBuildFile}"
						               regexp="(:([^:]+):([^:]+):([^:]+)):(.+)/([^/]+)"
						               replace="\1"
						/>
						<propertyregex override="true"
						               property="cvsPath"
						               defaultvalue="${coordinatedReleaseBuildFile}"
						               input="${coordinatedReleaseBuildFile}"
						               regexp="(:([^:]+):([^:]+):([^:]+)):(.+)/([^/]+)"
						               replace="\5"
						/>
						<cvs reallyquiet="true"
						     cvsroot="${cvsRoot}"
						     command="checkout"
						     dest="${tmpfolder}"
						     package="${cvsPath}"
						     failonerror="true"
						/>
						<propertyregex override="true"
						               property="coordinatedReleaseBuildFile"
						               defaultvalue="${coordinatedReleaseBuildFile}"
						               input="${coordinatedReleaseBuildFile}"
						               regexp="(:([^:]+):([^:]+):([^:]+)):(.+)/([^/]+)"
						               replace="${tmpfolder}/${cvsPath}/\6"
						/>
					</then>
				</if>

				<!-- if not set, targetUpdateURL will be calculated from targetUpdateDir using this substitution: /home/data/httpd/download.eclipse.org/* becomes http://download.eclipse.org/* -->
				<if>
					<not>
						<isset property="targetUpdateURL" />
					</not>
					<then>
						<propertyregex override="true"
						               property="targetUpdateURL"
						               defaultvalue="${targetUpdateDir}"
						               input="${targetUpdateDir}"
						               regexp="\/home\/data\/httpd\/download\.eclipse\.org\/(.+)"
						               replace="http://download.eclipse.org/\1"
						/>
					</then>
				</if>

				<var name="sitexmlPath" value="${targetUpdateDir}/site.xml" />
				<if>
					<!-- use alternate site.xml file if avail -->
					<available file="${targetUpdateDir}/site-${coordinatedReleaseName}.xml" type="file" />
					<then>
						<var name="sitexmlPath" value="${targetUpdateDir}/site-${coordinatedReleaseName}.xml" />
					</then>
				</if>

				<!-- debug: 
				<echo>cvsRoot=${cvsRoot}, cvsPath=${cvsPath}</echo>
				<echo>coordinatedReleaseBuildFile=${coordinatedReleaseBuildFile}</echo>

				<echo>targetUpdateURL=${targetUpdateURL}</echo>
				<echo>sitexmlPath=${sitexmlPath}</echo> 
				-->

				<!-- TODO: special case for EMF/XSD: need two .build files to be updated: emf-emf.build and mdt-xsd.build -->
				<for param="buildFile" list="${coordinatedReleaseBuildFile}" delimiter=", ">
					<sequential>

						<echo>Update latest feature versions in
	@{buildFile} ...</echo>

						<!-- collect feature versions -->
						<for param="featureJar">
							<path>
								<fileset dir="${targetUpdateDir}/features" includes="*.jar" />
							</path>
							<sequential>
								<var name="feature.jarfile" unset="true" />
								<var name="feature.id" unset="true" />
								<var name="feature.version" unset="true" />
								<propertyregex property="feature.jarfile"
								               defaultvalue="@{featureJar}"
								               input="@{featureJar}"
								               regexp=".+/features/([^/]+\.jar)"
								               replace="\1"
								               override="true"
								/>
								<propertyregex property="feature.id"
								               defaultvalue="${feature.jarfile}"
								               input="${feature.jarfile}"
								               regexp="([^_]+)_(\d+\.\d+\.\d+\..+)\.jar"
								               replace="\1"
								               override="true"
								/>
								<propertyregex property="feature.version"
								               defaultvalue="${feature.jarfile}"
								               input="${feature.jarfile}"
								               regexp="([^_]+)_(\d+\.\d+\.\d+\..+)\.jar"
								               replace="\2"
								               override="true"
								/>
								<property name="${feature.id}.version" value="${feature.version}" />
								<!-- <echo>${feature.id}.version = ${feature.version}</echo> -->
								<var name="feature.jarfile" unset="true" />
								<var name="feature.id" unset="true" />
								<var name="feature.version" unset="true" />
							</sequential>
						</for>

						<!-- First, in .build file, replace feature versions; replace on all lines
						id="org.eclipse.gmf.sdk" version="2.3.0.v20091216-1748-7C7J-BLxloAuwMCHwnJTf2Rjj-AN"
							with
						id="org.eclipse.gmf.sdk" version="${org.eclipse.gmf.sdk.version}"
						
						See: http://ant.apache.org/manual/OptionalTasks/replaceregexp.html
						-->
						<replaceregexp file="@{buildFile}"
						               match="id=&quot;([^&quot;]+)&quot; version=&quot;[^&quot;]+&quot;"
						               replace="id=&quot;\1&quot; version=&quot;${\1.version}&quot;"
						               flags="gim"
						               byline="true"
						/>
						<!-- Next, replace update site in case we're sourcing from a different place; only change first occurrence
						repositories location="http://download.eclipse.org/technology/linuxtools/update-helios/" 
							with 
						repositories location="${targetUpdateURL}"
						-->
						<replaceregexp file="@{buildFile}"
						               match="repositories location=&quot;([^&quot;]+)&quot;"
						               replace="repositories location=&quot;${targetUpdateURL}&quot;"
						               flags="im"
						               byline="true"
						/>

						<!-- now expand properties to fill in feature versions w/ real values -->
						<loadfile property="buildFile.contents" srcfile="@{buildFile}">
							<filterchain>
								<expandproperties />
							</filterchain>
						</loadfile>
						<echo file="@{buildFile}" message="${buildFile.contents}" />
						<var name="buildFile.contents" unset="true" />
					</sequential>
				</for>

				<!-- commit changed file -->
				<if>
					<isset property="cvsRoot" />
					<then>
						<cvs cvsroot="${cvsRoot}"
						     command="-q ci -m &quot;promote.xml automated update&quot;"
						     dest="${tmpfolder}"
						     package="${cvsPath}"
						/>
					</then>
				</if>

				<!-- cleanup -->
				<delete dir="${tmpfolder}" quiet="true" />
			</then>
			<else>
				<if>
					<and>
						<isset property="targetUpdateDir" />
						<not>
							<equals arg1="${targetUpdateDir}" arg2="" />
						</not>
						<not>
							<available file="${targetUpdateDir}/features" type="dir" />
						</not>
					</and>
					<then>
						<fail>Error!
Must set a valid targetUpdateDir and coordinatedReleaseBuildFile in promote*.properties file. 
	${targetUpdateDir}/features not found in 
	${targetUpdateDir}
</fail>
					</then>
					<else>
						<fail>Error!
Must set targetUpdateDir and coordinatedReleaseBuildFile in promote*.properties file.
</fail>
					</else>
				</if>
			</else>
		</if>
	</target>

	<target name="test">
		<!-- get antunit from: http://ant.apache.org/antlibs/antunit/; unzip and place renamed jar in lib folder -->
		<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml">
			<classpath>
				<pathelement location="${relengCommonBuilderDir}/lib/ant-antunit.jar" />
				<pathelement location="../lib/ant-antunit.jar" />
				<pathelement location="./lib/ant-antunit.jar" />
			</classpath>
		</taskdef>
		<au:antunit>
			<fileset dir="tests" includes="promote.test*.xml" />
			<au:plainlistener />
		</au:antunit>
	</target>

	<!-- see tests/promote.test.getSourceZipsDir.xml for more elaborate tests -->
	<target name="test.getSourceZipsDir" depends="init">
		<var name="sourceZipsDirActual" unset="true" />
		<property name="test.getSourceZipsDir.inputDir" value="/tmp/test.getSourceZipsDir" />
		<property name="test.getSourceZipsDir.debug" value="true" />
		<property name="test.getSourceZipsDir.buildType" value="N" />
		<mkdir dir="${test.getSourceZipsDir.inputDir}/workspace/build/N201002011133" />
		<getSourceZipsDir inputDir="${test.getSourceZipsDir.inputDir}" buildType="${test.getSourceZipsDir.buildType}" />
		<var name="sourceZipsDirActual" unset="true" />
		<mkdir dir="${test.getSourceZipsDir.inputDir}/builds/2010-02-02_11-22-33/archive/build/N-SNAPSHOT" />
		<getSourceZipsDir inputDir="${test.getSourceZipsDir.inputDir}" buildType="${test.getSourceZipsDir.buildType}" />
		<var name="sourceZipsDirActual" unset="true" />
		<mkdir dir="${test.getSourceZipsDir.inputDir}/N201003041234-myproject" />
		<getSourceZipsDir inputDir="${test.getSourceZipsDir.inputDir}" buildType="${test.getSourceZipsDir.buildType}" />
		<delete dir="${test.getSourceZipsDir.inputDir}" includeemptydirs="true" deleteonexit="true" />
		<var name="sourceZipsDirActual" unset="true" />
	</target>

	<macrodef name="getSourceZipsDir">
		<attribute name="inputDir" />
		<attribute name="buildType" />
		<sequential>
			<!-- 
		first, search for {N,I,M,S,R}* folder; 
		 next, search for **/archive/build/{N,I,M,S,R}* folder;
		 last, search for **/workspace/build/{N,I,M,S,R}* folder
	-->
			<var name="sourceZipsDir.patterns"
			     value="@{buildType}*, **/archive/build/@{buildType}*, **/workspace/build/@{buildType}*"
			/>
			<for param="sourceZipsDir.pattern" list="${sourceZipsDir.patterns}" delimiter=", ">
				<sequential>
					<var name="sourceZipsDir.nestedBuilds" value="" />
					<if>
						<not>
							<isset property="sourceZipsDirActual" />
						</not>
						<then>
							<if>
								<available file="@{inputDir}" type="dir" />
								<then>
									<debug>Search @{inputDir} for folders matching "@{sourceZipsDir.pattern}" ...</debug>
									<for param="aDir">
										<path>
											<dirset dir="@{inputDir}" includes="@{sourceZipsDir.pattern}" />
										</path>
										<sequential>
											<if>
												<available file="@{aDir}" type="dir" />
												<then>
													<debug>Found @{aDir}</debug>
													<var name="sourceZipsDir.nestedBuilds"
													     value="${sourceZipsDir.nestedBuilds},@{aDir}"
													/>
												</then>
											</if>
										</sequential>
									</for>
									<if>
										<isset property="sourceZipsDir.nestedBuilds" />
										<then>
											<sortlist property="sourceZipsDir.nestedBuilds.sorted"
											          value="${sourceZipsDir.nestedBuilds}"
											          delimiter=","
											          override="true"
											/>
											<for param="aDir" list="${sourceZipsDir.nestedBuilds.sorted}" delimiter=",">
												<sequential>
													<var name="sourceZipsDirActual" value="@{aDir}" />
												</sequential>
											</for>
										</then>
										<else>
											<debug>No builds found for @{sourceZipsDir.pattern}</debug>
										</else>
									</if>
								</then>
								<else>
									<fail>Error!
Directory not found for $${sourceZipsDir} = 
	@{inputDir}</fail>
								</else>
							</if>
						</then>
					</if>
				</sequential>
			</for>
			<var name="sourceZipsDir.nestedBuilds" unset="true" />
			<var name="sourceZipsDir.patterns" unset="true" />
		</sequential>
	</macrodef>

	<macrodef name="debug">
		<text name="echo" />
		<sequential>
			<if>
				<and>
					<isset property="debug" />
					<istrue value="${debug}" />
				</and>
				<then>
					<echo message="@{echo}" />
				</then>
			</if>
		</sequential>
	</macrodef>

</project>